async def custom_color_wipe_loop(hex_color: str, delay: float = 0.05):
    """
    Infinite Snake Animation:
    - Background always at half brightness
    - Snakes (length=10) move forward with full brightness
    - Random gap between snakes (min 3, max 10 LEDs)
    """

    global stop_requested

    r_base = int(hex_color[1:3], 16)
    g_base = int(hex_color[3:5], 16)
    b_base = int(hex_color[5:7], 16)

    DIM_LEVEL = 100  # نصف السطوع
    BRIGHT_LEVEL = 255  # السطوع الكامل

    # حساب لون الخلفية
    background_color = (
        (r_base * DIM_LEVEL) // 255,
        (g_base * DIM_LEVEL) // 255,
        (b_base * DIM_LEVEL) // 255
    )

    # اضاءة كل الـ LEDs بالخلفية نصف السطوع
    for i in range(NUM_LEDS):
        neo.set_led_color(i, *background_color)
    neo.update_strip()

    # Snake class
    class Snake:
        def __init__(self):
            self.length = 10
            self.position = 0
            self.done = False

        def get_body_indexes(self):
            return [i for i in range(self.position, self.position + self.length) if 0 <= i < NUM_LEDS]

        def get_tail_index(self):
            return self.position - 1

        def move(self):
            self.position += 1
            if self.position - 1 > NUM_LEDS:
                self.done = True

    snakes = []
    gap_counter = 0
    next_gap = random.randint(3, 10)

    while not stop_requested:
        # إضافة أفعى جديدة إذا تجاوزنا الفجوة
        if gap_counter >= next_gap:
            snakes.append(Snake())
            gap_counter = 0
            next_gap = random.randint(3, 10)
        else:
            gap_counter += 1

        # تحديث كل أفعى
        for snake in snakes:
            tail = snake.get_tail_index()
            if 0 <= tail < NUM_LEDS:
                neo.set_led_color(tail, *background_color)  # إعادة الذيل للخلفية

            for i in snake.get_body_indexes():
                neo.set_led_color(i, r_base, g_base, b_base)  # جسم الأفعى بسطوع كامل

            snake.move()

        # حذف الأفاعي المنتهية
        snakes = [s for s in snakes if not s.done]

        neo.update_strip()
        await asyncio.sleep(delay)

    neo.clear_strip()
    neo.update_strip()
