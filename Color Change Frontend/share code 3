class Ripple:
    def __init__(self, center, color):
        self.center = center
        self.radius = 0
        self.color = color
        self.active = True

    def draw(self):
        left = self.center - self.radius
        right = self.center + self.radius

        brightness = max(0, 255 - self.radius * 30)  # يقل كل ما كبر

        r = (self.color[0] * brightness) // 255
        g = (self.color[1] * brightness) // 255
        b = (self.color[2] * brightness) // 255

        if 0 <= left < NUM_LEDS:
            neo.set_led_color(left, r, g, b)
        if 0 <= right < NUM_LEDS:
            neo.set_led_color(right, r, g, b)

        self.radius += 1
        if left < 0 and right >= NUM_LEDS:
            self.active = False


async def custom_ripple_touch_loop(hex_color: str, delay: float = 0.04):
    """
    Infinite Ripple Explosion:
    - Multiple ripples radiate from center with fading effect.
    """
    global stop_requested
    r = int(hex_color[1:3], 16)
    g = int(hex_color[3:5], 16)
    b = int(hex_color[5:7], 16)
    center = NUM_LEDS // 2

    ripples = []
    last_spawn = asyncio.get_event_loop().time()
    next_spawn_delay = random.uniform(0.2, 1.0)

    while not stop_requested:
        now = asyncio.get_event_loop().time()
        if now - last_spawn >= next_spawn_delay:
            ripples.append(Ripple(center=center, color=(r, g, b)))
            last_spawn = now
            next_spawn_delay = random.uniform(0.2, 0.8)

        neo.clear_strip()
        for ripple in ripples:
            if ripple.active:
                ripple.draw()
        ripples = [r for r in ripples if r.active]

        neo.update_strip()
        await asyncio.sleep(delay)

    neo.clear_strip()
    neo.update_strip()
