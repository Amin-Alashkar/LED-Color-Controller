async def custom_tunnel_effect_loop(hex_color: str, delay: float = 0.05, snake_length: int = 5):
    global stop_requested
    r = int(hex_color[1:3], 16)
    g = int(hex_color[3:5], 16)
    b = int(hex_color[5:7], 16)

    mid = NUM_LEDS // 2

    while not stop_requested:
        # Phase 1: الأفعى من الطرفين تدخل نحو المركز
        for step in range(mid + snake_length):
            if stop_requested:
                return
            neo.clear_strip()

            # يمين → يسار
            for i in range(snake_length):
                pos = step - i
                if 0 <= pos < mid:
                    factor = (snake_length - i) / snake_length
                    neo.set_led_color(pos, int(r * factor), int(g * factor), int(b * factor))

            # يسار → يمين
            for i in range(snake_length):
                pos = NUM_LEDS - 1 - (step - i)
                if mid <= pos < NUM_LEDS:
                    factor = (snake_length - i) / snake_length
                    neo.set_led_color(pos, int(r * factor), int(g * factor), int(b * factor))

            neo.update_strip()
            await asyncio.sleep(delay)

        # Phase 2: انفجار في المنتصف
        if stop_requested:
            return

        for brightness in range(255, -1, -15):  # يتلاشى بالتدريج
            for i in range(NUM_LEDS):
                neo.set_led_color(i, int(r * brightness / 255), int(g * brightness / 255), int(b * brightness / 255))
            neo.update_strip()
            await asyncio.sleep(0.03)

        neo.clear_strip()
        neo.update_strip()

        # Phase 3: استراحة عشوائية قبل التكرار
        wait_time = random.uniform(1, 10)
        for _ in range(int(wait_time / 0.1)):
            if stop_requested:
                return
            await asyncio.sleep(0.1)
