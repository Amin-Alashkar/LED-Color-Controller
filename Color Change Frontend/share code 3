import asyncio
import random

class SparklingStar:
    def __init__(self, index, r, g, b):
        self.index = index
        self.r = r
        self.g = g
        self.b = b

    async def animate(self):
        while True:
            # تأخير قبل بداية اللمعة
            await asyncio.sleep(random.uniform(0.5, 5.0))

            # Fade in slowly
            for step in range(20):
                factor = step / 20
                neo.set_led_color(
                    self.index,
                    int(self.r * factor),
                    int(self.g * factor),
                    int(self.b * factor),
                )
                neo.update_strip()
                await asyncio.sleep(0.04)  # أبطأ شوي

            # Fade out slowly
            for step in range(20, -1, -1):
                factor = step / 20
                neo.set_led_color(
                    self.index,
                    int(self.r * factor),
                    int(self.g * factor),
                    int(self.b * factor),
                )
                neo.update_strip()
                await asyncio.sleep(0.04)

            # تأخير قصير قبل الدورة التالية
            await asyncio.sleep(random.uniform(0.5, 2.5))


async def custom_sparkling_stars_loop(hex_color: str, num_stars: int = 80):
    """
    TG Special Sparkling Stars:
    - 80 stars twinkling slowly with delayed independent starts.
    """
    global stop_requested
    r_base = int(hex_color[1:3], 16)
    g_base = int(hex_color[3:5], 16)
    b_base = int(hex_color[5:7], 16)

    star_indices = random.sample(range(NUM_LEDS), min(num_stars, NUM_LEDS))

    tasks = []
    for idx in star_indices:
        star = SparklingStar(idx, r_base, g_base, b_base)
        # تشغيل كل نجمة بتاسك مستقلة
        tasks.append(asyncio.create_task(star.animate()))

    try:
        while not stop_requested:
            await asyncio.sleep(0.1)
    finally:
        for task in tasks:
            task.cancel()
        neo.clear_strip()
        neo.update_strip()
