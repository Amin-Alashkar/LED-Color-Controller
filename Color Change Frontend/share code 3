import random

class Echo:
    def __init__(self, center, color, max_radius):
        self.center = center
        self.color = color
        self.radius = 0
        self.max_radius = max_radius
        self.alive = True

    def update(self):
        self.radius += 1
        if self.radius > self.max_radius:
            self.alive = False

    def apply(self, strip):
        for offset in range(-self.radius, self.radius + 1):
            pos = self.center + offset
            if 0 <= pos < NUM_LEDS:
                fade = max(0, (self.max_radius - abs(offset)) / self.max_radius)
                r = int(self.color[0] * fade)
                g = int(self.color[1] * fade)
                b = int(self.color[2] * fade)
                strip[pos] = (r, g, b)


async def custom_color_echo_loop(hex_color: str, delay: float = 0.05):
    """
    Echo with multiple expanding ripples from random origins.
    Designed for long LED strips (150+ LEDs).
    """
    global stop_requested
    r_base = int(hex_color[1:3], 16)
    g_base = int(hex_color[3:5], 16)
    b_base = int(hex_color[5:7], 16)

    color = (r_base, g_base, b_base)
    echoes = []

    while not stop_requested:
        # إضافة صدى جديد من مركز عشوائي
        if random.random() < 0.2:  # نسبة ظهور موجة جديدة
            center = random.randint(0, NUM_LEDS - 1)
            echoes.append(Echo(center, color, max_radius=10))

        # مسح الشريط (كتم اللمبات)
        strip = [(0, 0, 0)] * NUM_LEDS

        # تحديث الموجات الحالية
        for echo in echoes:
            echo.apply(strip)
            echo.update()

        # إزالة الموجات الميتة
        echoes = [e for e in echoes if e.alive]

        # تحديث الشريط الفعلي
        for i, (r, g, b) in enumerate(strip):
            neo.set_led_color(i, r, g, b)
        neo.update_strip()

        await asyncio.sleep(delay)

    # عند الإيقاف
    neo.clear_strip()
    neo.update_strip()
