class Segment:
    def __init__(self, start, size, color):
        self.position = start
        self.size = size
        self.color = color
        self.active = True

    def draw(self):
        for i in range(self.size):
            idx = self.position + i
            if 0 <= idx < NUM_LEDS:
                neo.set_led_color(idx, *self.color)

    def move(self, step=1):
        self.position += step
        if self.position >= NUM_LEDS:
            self.active = False

async def custom_bounce_back_loop(hex_color: str, delay: float = 0.03):
    """
    Endless Segments Parade:
    - Segments keep entering the strip from left and exit from right.
    """
    global stop_requested
    r = int(hex_color[1:3], 16)
    g = int(hex_color[3:5], 16)
    b = int(hex_color[5:7], 16)

    segments = []
    spawn_interval = 0.5  # time between new segments
    last_spawn_time = asyncio.get_event_loop().time()

    while not stop_requested:
        neo.clear_strip()

        now = asyncio.get_event_loop().time()
        if now - last_spawn_time >= spawn_interval:
            segment_size = random.randint(4, 7)
            segments.append(Segment(start=-segment_size, size=segment_size, color=(r, g, b)))
            last_spawn_time = now

        # Move and draw segments
        for segment in segments:
            if segment.active:
                segment.move(step=1)
                segment.draw()

        # Remove inactive ones
        segments = [s for s in segments if s.active]

        neo.update_strip()
        await asyncio.sleep(delay)

    neo.clear_strip()
    neo.update_strip()
