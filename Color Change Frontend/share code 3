// app.js

const API_BASE_URL = `http://${window.location.hostname}:8000`;

// DOM Elements
const colorDisplay         = document.getElementById('colorDisplay');
const lightOneBtn          = document.getElementById('lightOneBtn');
const offBtn               = document.getElementById('offBtn');
const off2Btn              = document.getElementById('off2Btn');
const colorPicker          = document.getElementById('colorPicker');

const cardElement          = document.querySelector('.card');

let isAnimationRunning = false;
let currentAnim = null;

// نداء عام لإرسال طلبات POST
async function sendRequest(endpoint, data) {
    try {
        const res = await fetch(`${API_BASE_URL}${endpoint}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data),
            credentials: 'include'

        });
        return await res.json();
    } catch (e) {
        console.error("API Error:", e);
        return { status: "error", message: e.message };
    }
}

// جلب الحالة الحالية من /state وتحديث الواجهة
async function fetchAndApplyState() {
    try {
        const res = await fetch(`${API_BASE_URL}/state`, {
        credentials: 'include'
        });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const { animation, color } = await res.json();


        if (color) {
            updateUI(color);
            cardElement.style.background = "";
        } else {
            updateUI('#000000');
            cardElement.style.background = "";
        }

        // ——— Fade Colors ———
        if (animation === "fade_colors") {
            isAnimationRunning = true;
            currentAnim = "fade_colors";
            lightOneBtn.classList.add('active');
            lightOneBtn.textContent = 'Fade Colors (Running)';
            cardElement.style.background = "#000000";
            colorDisplay.textContent = "Fade Colors";
        } else {
            lightOneBtn.classList.remove('active');
            lightOneBtn.textContent = 'Fade Colors';
        }

    } catch (err) {
        console.error("Error fetching state:", err);
        updateUI('#000000');
        isAnimationRunning = false;
        currentAnim = null;
        // إزالة أي حالة نشطة على الأزرار
        lightOneBtn.classList.remove('active');
        lightOneBtn.textContent = 'Fade Colors';
        pulseSyncBtn.classList.remove('active');
        pulseSyncBtn.textContent = 'Pulse Sync';
        
        cardElement.style.background = "";
    }
}

// دالة تغيير اللون الثابت
async function changeColor(color) {
    if (isAnimationRunning) {
        await stopAnimation();
    }
    updateUI(color);
    cardElement.style.background = "";
    await sendRequest("/color", { hex_color: color });
}

// دالة إيقاف الأنيميشن (POST /stop)
async function stopAnimation() {
    isAnimationRunning = false;
    currentAnim = null;
    // نزيل الحالة النشطة من كل الأزرار
    lightOneBtn.classList.remove('active');
    lightOneBtn.textContent = 'Fade Colors';

    colorDisplay.textContent = 'Off';
    cardElement.style.background = "";
    await sendRequest("/stop", {});
}

// ——— الدوال التي تشغل الانيميشنات ———

// Fade Colors
async function startFadeAnimation() {
    if (isAnimationRunning && currentAnim !== "fade_colors") {
        await stopAnimation();
    }
    // إذا كانت نفس الانيميشن تعمل حاليًا، نوقفها
    if (isAnimationRunning && currentAnim === "fade_colors") {
        await stopAnimation();
        return;
    }
    isAnimationRunning = true;
    currentAnim = "fade_colors";
    lightOneBtn.classList.add('active');
    lightOneBtn.textContent = 'Fade Colors (Running)';
    cardElement.style.background = "#000000";
    colorDisplay.textContent = "Fade Colors";
    await sendRequest("/animate", { animation_type: "fade_colors" });
}

// Pulse Sync
async function startPulseSyncAnimation() {
    if (isAnimationRunning && currentAnim !== "pulse_sync") {
        await stopAnimation();
    }
    if (isAnimationRunning && currentAnim === "pulse_sync") {
        await stopAnimation();
        return;
    }
    isAnimationRunning = true;
    currentAnim = "pulse_sync";
    pulseSyncBtn.classList.add('active');
    pulseSyncBtn.textContent = 'Pulse Sync (Running)';
    cardElement.style.background = "#000000";
    colorDisplay.textContent = "Pulse Sync";
    await sendRequest("/animate", { animation_type: "pulse_sync" });
}

// تحديث الواجهة إلى اللون المعطى
function updateUI(color) {
    document.body.style.background     = color;
    document.body.style.boxShadow      = `0 0 80px ${color}80 inset`;
    colorDisplay.style.background      = color;
    colorDisplay.textContent           = color.toUpperCase();
    colorPicker.value                  = color;
}

// ربط الأحداث
lightOneBtn          .addEventListener("click", startFadeAnimation);
pulseSyncBtn         .addEventListener("click", startPulseSyncAnimation);
waveEffectBtn        .addEventListener("click", startWaveAnimation);
offBtn               .addEventListener("click", stopAnimation);
off2Btn              .addEventListener("click", stopAnimation);


// عند تغيير اللون عبر Color Picker
colorPicker.addEventListener("input", e => {
    changeColor(e.target.value);
});

// عند تحميل الصفحة أول مرة
document.addEventListener("DOMContentLoaded", async () => {
    // جلب حالة اللون والأنيميشن
    await fetchAndApplyState();
    
    // تحديث كل ثانيتين
    setInterval(fetchAndApplyState, 2000);
    
    // التحقق من حالة الأدمن
    try {
        const res = await fetch(`${API_BASE_URL}/admin/status`, {
            credentials: 'include'
        });
        const status = await res.json();
        is_admin = status.is_admin || false;
        updateUIForAdmin(); // تحديث الواجهة لعرض/إخفاء خيارات الأدمن
    } catch (e) {
        console.error("Admin status check failed:", e);
    }
});


// SSE لدفع الحالة تلقائيًا
const evtSource = new EventSource(`${API_BASE_URL}/stream`, {
    withCredentials: true
});
evtSource.onmessage = e => {
    try {
        const { animation, color } = JSON.parse(e.data);

        if (color) {
            updateUI(color);
            cardElement.style.background = "";
        } else {
            updateUI('#000000');
            cardElement.style.background = "";
        }

        // ثم نفس المنطق السابق في fetchAndApplyState()
        if (animation === "fade_colors") {
            isAnimationRunning = true;
            currentAnim = "fade_colors";
            lightOneBtn.classList.add('active');
            lightOneBtn.textContent = 'Fade Colors (Running)';
            cardElement.style.background = "#000000";
            colorDisplay.textContent = "Fade Colors";
        } else {
            lightOneBtn.classList.remove('active');
            lightOneBtn.textContent = 'Fade Colors';
        }

        if (animation === "pulse_sync") {
            isAnimationRunning = true;
            currentAnim = "pulse_sync";
            pulseSyncBtn.classList.add('active');
            pulseSyncBtn.textContent = 'Pulse Sync (Running)';
            cardElement.style.background = "#000000";
            colorDisplay.textContent = "Pulse Sync";
        } else {
            pulseSyncBtn.classList.remove('active');
            pulseSyncBtn.textContent = 'Pulse Sync';
        }


    } catch (err) {
        console.error("SSE onmessage parse error:", err);
    }
};



let is_admin = false; 
// Get modal elements
const modal = document.getElementById('adminModal');
const vipBtn = document.getElementById('vipBtn');
const closeBtn = document.querySelector('.close-btn');
const modalContent = document.querySelector('.modal-content');

// Show modal when VIP button is clicked
vipBtn.addEventListener('click', function() {
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden'; // Prevent scrolling
    
    // Reset closing state
    modal.classList.remove('closing');
});

// Function to close modal with animation
function closeModal() {
    // Add closing class to trigger animations
    modal.classList.add('closing');
    
    // After animation completes, hide the modal
    setTimeout(() => {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto'; // Restore scrolling
    }, 600); // Match animation duration
}

// Hide modal when close button is clicked
closeBtn.addEventListener('click', closeModal);

// Hide modal when clicking outside the modal content
modal.addEventListener('click', function(e) {
    if (e.target === modal) {
        closeModal();
    }
});

// Close with ESC key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && modal.style.display === 'flex') {
        closeModal();
    }
});
document.querySelector('.submit-btn').addEventListener('click', async function() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    const submitBtn = this;
    
    if(username && password) {

        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Accessing...';
        submitBtn.disabled = true;
        
        try {
            const formData = new FormData();
            formData.append('username', username);
            formData.append('password', password);
            
            const response = await fetch(`${API_BASE_URL}/admin/login`, {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.redirect) {
                    window.location.href = result.redirect;
                } else {
                    window.location.href = 'http://192.168.1.247:5501/';
                }
            } else {
                const error = await response.json();
                alert(error.detail || 'Login failed. Please check your credentials.');
            }
        } catch (error) {
            console.error('Login error:', error);
            alert('Network error. Please try again.');
        } finally {
            submitBtn.innerHTML = 'Access Dashboard';
            submitBtn.disabled = false;
        }
    } else {
        alert('Please enter both username and password');
    }
});

async function adminLogin() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    const submitBtn = document.querySelector('.submit-btn');

    if (!username || !password) {
        alert('Please enter both username and password');
        return;
    }

    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Accessing…';
    submitBtn.disabled = true;

    try {
        const formData = new FormData();
        formData.append('username', username);
        formData.append('password', password);

        const response = await fetch(`${API_BASE_URL}/admin/login`, {
            method: 'POST',
            body: formData,
            credentials: 'include'
        });

        if (response.ok) {
            const result = await response.json();
            if (result.status === "success") {
                // — بدل alert —
                is_admin = true;
                closeModal();               
                updateUIForAdmin();         
            } else {
                throw new Error('Login failed. Please check your credentials.');
            }
        } else {
            const error = await response.json();
            throw new Error(error.detail || 'Login failed');
        }
    } catch (error) {
        alert(error.message);
    } finally {
        submitBtn.innerHTML = 'Access Dashboard';
        submitBtn.disabled = false;
    }
}


function updateUIForAdmin() {
    const adminFeatures = document.getElementById('adminFeatures');
    if (is_admin) {
        adminFeatures.style.display = 'block';
        adminFeatures.innerHTML = `
            <h2 class="button-title">Admin Controls</h2>
            <div class="button-container">
                <button id="resetSystemBtn" onclick="systemReset()">Reset System</button>
                <button id="rebootDeviceBtn" onclick="rebootDevice()">Reboot Device</button>
                <button id="shutdownSystemBtn" onclick="shutdownSystem()">Shutdown</button>
                <button id="adminLogoutBtn" onclick="adminLogout()">Logout</button>
            </div>
        `;
    } else {
        adminFeatures.style.display = 'none';
        adminFeatures.innerHTML = '';
    }
}




async function systemReset() {
  await fetch(`${API_BASE_URL}/admin/reset`, {
    method: 'POST',
    credentials: 'include'
  });
  alert('System reset!');
}




async function rebootDevice() {
  await fetch(`${API_BASE_URL}/admin/reboot`, {
    method: 'POST',
    credentials: 'include'
  });
  alert('Device rebooting...');
}




async function shutdownSystem() {
  await fetch(`${API_BASE_URL}/admin/shutdown`, {
    method: 'POST',
    credentials: 'include'
  });
  alert('System shutting down...');
}



async function adminLogout() {
  await fetch(`${API_BASE_URL}/admin/logout`, {
    method: 'POST',
    credentials: 'include'
  });
  is_admin = false;
  updateUIForAdmin();
  alert('You have been logged out');
}




async function checkAdminStatus() {
  try {
    const res = await fetch(`${API_BASE_URL}/admin/status`, {
      credentials: 'include'
    });
    const data = await res.json();
    is_admin = data.is_admin;
    updateUIForAdmin(); // دالة تتحكم بظهور أزرار الأدمن
  } catch (error) {
    console.error('فشل التحقق من حالة الأدمن:', error);
  }
}

// شغّلها عند بداية التشغيل
checkAdminStatus();

// ربط دالة تسجيل الدخول بالزر
document.querySelector('.submit-btn').addEventListener('click', adminLogin);

# server.py

from fastapi import FastAPI, Request, Form, HTTPException, status
from pydantic import BaseModel
from pi5neo import Pi5Neo
import asyncio, random, threading, time, json, colorsys, math
from collections import deque
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse, HTMLResponse
from starlette.middleware.sessions import SessionMiddleware




NUM_LEDS = 150
neo = Pi5Neo('/dev/spidev0.0', NUM_LEDS, 800)

BRIGHTNESS_SCALE = 0.25

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

animation_queue = deque()
animation_lock = threading.Lock()
stop_requested = False
current_hex: str | None = "#000000"
current_anim: str | None = None

class AnimationRequest(BaseModel):
    animation_type: str
    color_index: int = 0
    hex_color: str | None = None   # <-- we already need this

class ColorRequest(BaseModel):
    hex_color: str




app.add_middleware(SessionMiddleware, secret_key="your-very-secret-key-here")

# Admin credentials
ADMIN_USERNAME = "adminpanel"
ADMIN_PASSWORD = "RoomB107"

#global variables after ADMIN_USERNAME/ADMIN_PASSWORD
login_attempts = {}
lockout_times = {}
login_lock = threading.Lock()


# Track failed login attempts (in-memory, for production use Redis)
failed_attempts = {}
lockout_times = {}

# Add to server.py
@app.post("/reset")
async def reset_system():
    # Add your reset logic here
    return {"status": "reset"}

@app.post("/reboot")
async def reboot_device():
    # Add your reboot logic here
    return {"status": "rebooting"}

@app.post("/shutdown")
async def shutdown_system():
    # Add your shutdown logic here
    return {"status": "shutting_down"}


@app.get("/admin/dashboard", response_class=HTMLResponse)
async def admin_dashboard(request: Request):
    if not request.session.get("is_admin"):
        return RedirectResponse(url="/admin/login")
    
    # Return the admin panel HTML directly
    return 

@app.post("/admin/stop")
async def admin_stop(request: Request):
    if not request.session.get("is_admin"):
        raise HTTPException(status_code=403, detail="Forbidden")
    
    # Call regular stop endpoint
    await stop_animation()
    return {"message": "All LEDs turned off"}

@app.post("/admin/reset")
async def admin_reset(request: Request):
    if not request.session.get("is_admin"):
        raise HTTPException(status_code=403, detail="Forbidden")
    
    # Add your reset logic here
    return {"message": "System reset complete"}

@app.post("/admin/shutdown")
async def admin_shutdown(request: Request):
    if not request.session.get("is_admin"):
        raise HTTPException(status_code=403, detail="Forbidden")
    
    # Add shutdown logic here
    return {"message": "System shutdown initiated"}

@app.post("/admin/reboot")
async def admin_reboot(request: Request):
    if not request.session.get("is_admin"):
        raise HTTPException(status_code=403, detail="Forbidden")
    
    # Add reboot logic here
    return {"message": "System rebooting..."}

@app.post("/admin/logout")
async def admin_logout(request: Request):
    request.session.clear()
    return {"status": "success"}


@app.post("/admin/login")
async def admin_login(request: Request, 
                     username: str = Form(...), 
                     password: str = Form(...)):
    ip = request.client.host
    current_time = time.time()
    
    with login_lock:
        # Check if IP is currently locked out
        if ip in lockout_times and lockout_times[ip] > current_time:
            remaining = int(lockout_times[ip] - current_time)
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail=f"Too many failed attempts. Please try again in {remaining} seconds."
            )
        
        # Check credentials
        if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
            # Reset failed attempts on successful login
            if ip in login_attempts:
                del login_attempts[ip]
            if ip in lockout_times:
                del lockout_times[ip]
                
            request.session["is_admin"] = True
            # Return success status without redirect
            return {"status": "success"}
        else:
            # Increment failed attempt count
            login_attempts[ip] = login_attempts.get(ip, 0) + 1
            attempt_count = login_attempts[ip]
            
            # Calculate lockout parameters
            lockout_level = (attempt_count - 1) // 3
            lockout_duration = (2 ** lockout_level) * 60  # in seconds
            
            # If reached a multiple of 3, set lockout
            if attempt_count % 3 == 0:
                lockout_times[ip] = current_time + lockout_duration
                raise HTTPException(
                    status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                    detail=f"Too many failed attempts. Account locked for {lockout_duration} seconds."
                )
            else:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Incorrect username or password"
                )
@app.get("/admin/status")
async def admin_status(request: Request):
    return {"is_admin": request.session.get("is_admin", False)}



@app.post("/admin/reset")
async def admin_reset(request: Request):
    if not request.session.get("is_admin"):
        raise HTTPException(status_code=403, detail="Forbidden")
    return {"message": "System reset complete"}

@app.post("/admin/reboot")
async def admin_reboot(request: Request):
    if not request.session.get("is_admin"):
        raise HTTPException(status_code=403, detail="Forbidden")
    return {"message": "System rebooting..."}

@app.post("/admin/shutdown")
async def admin_shutdown(request: Request):
    if not request.session.get("is_admin"):
        raise HTTPException(status_code=403, detail="Forbidden")
    return {"message": "System shutdown initiated"}
    


