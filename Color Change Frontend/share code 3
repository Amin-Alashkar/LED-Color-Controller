async def custom_tunnel_explosion_loop(hex_color: str, delay: float = 0.05):
    global stop_requested
    r = int(hex_color[1:3], 16)
    g = int(hex_color[3:5], 16)
    b = int(hex_color[5:7], 16)

    mid = NUM_LEDS // 2

    while not stop_requested:
        # Phase 1: move inward
        for step in range(mid + 1):
            if stop_requested:
                break
            neo.clear_strip()
            if step <= mid:
                neo.set_led_color(step, r, g, b)
                neo.set_led_color(NUM_LEDS - 1 - step, r, g, b)
            neo.update_strip()
            await asyncio.sleep(delay)

        # Phase 2: explosion in center
        if stop_requested:
            break
        for brightness in range(255, -1, -15):  # fade out explosion
            for i in range(NUM_LEDS):
                neo.set_led_color(i, int(r * brightness / 255), int(g * brightness / 255), int(b * brightness / 255))
            neo.update_strip()
            await asyncio.sleep(0.03)

        neo.clear_strip()
        neo.update_strip()

        # Phase 3: wait random time before repeating
        wait_time = random.uniform(1, 10)
        for _ in range(int(wait_time / 0.1)):
            if stop_requested:
                break
            await asyncio.sleep(0.1)
