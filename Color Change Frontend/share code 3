import asyncio
import random

class Star:
    def __init__(self, index, color, duration):
        self.index = index
        self.r, self.g, self.b = color
        self.duration = duration  # Total time for one cycle
        self.brightness = 0
        self.fading_in = True
        self.active = True

    async def sparkle(self):
        step_time = 0.05  # time between brightness updates
        steps = int(self.duration / step_time / 2)

        while self.active:
            for i in range(steps):
                if not self.active:
                    break
                self.brightness = int(255 * (i / steps))
                neo.set_led_color(self.index,
                                  (self.r * self.brightness) // 255,
                                  (self.g * self.brightness) // 255,
                                  (self.b * self.brightness) // 255)
                await asyncio.sleep(step_time)

            await asyncio.sleep(0.1)

            for i in range(steps):
                if not self.active:
                    break
                self.brightness = int(255 * ((steps - i) / steps))
                neo.set_led_color(self.index,
                                  (self.r * self.brightness) // 255,
                                  (self.g * self.brightness) // 255,
                                  (self.b * self.brightness) // 255)
                await asyncio.sleep(step_time)

            # بعد ما تخلص النجمة، تتطفي
            neo.set_led_color(self.index, 0, 0, 0)
            self.active = False


async def custom_sparkling_stars_loop(hex_color: str):
    global stop_requested
    neo.clear_strip()
    neo.update_strip()

    r = int(hex_color[1:3], 16)
    g = int(hex_color[3:5], 16)
    b = int(hex_color[5:7], 16)

    stars = []
    tasks = []

    while not stop_requested:
        if len(stars) < 80:
            # اختر مكان عشوائي ما عليه نجمة حاليا
            used_indexes = [s.index for s in stars if s.active]
            available_indexes = [i for i in range(NUM_LEDS) if i not in used_indexes]
            if available_indexes:
                idx = random.choice(available_indexes)
                star = Star(idx, (r, g, b), duration=random.uniform(1.5, 3.5))
                stars.append(star)
                tasks.append(asyncio.create_task(star.sparkle()))

        neo.update_strip()
        await asyncio.sleep(0.1)

    # نوقف كل النجوم
    for star in stars:
        star.active = False
    await asyncio.gather(*tasks)
    neo.clear_strip()
    neo.update_strip()
