async def custom_tunnel_explode_on_touch(hex_color: str, delay: float = 0.015, trail: int = 20):
    """
    Tunnel Effect – انفجار عند الالتقاء:
    - ضوء من الطرفين للمنتصف
    - عند الالتقاء يتم انفجار ضوئي مباشر
    - ثم يتلاشى، وينتظر وقت عشوائي قبل إعادة التأثير
    """
    global stop_requested

    r_base = int(hex_color[1:3], 16)
    g_base = int(hex_color[3:5], 16)
    b_base = int(hex_color[5:7], 16)

    middle = NUM_LEDS // 2

    while not stop_requested:
        # الحركة من الطرفين إلى المنتصف
        for step in range(middle + trail):
            if stop_requested:
                return

            neo.clear_strip()

            for t in range(trail):
                offset = step - t
                fade = (trail - t) / trail
                left = offset
                right = NUM_LEDS - 1 - offset

                r = int(r_base * fade * BRIGHTNESS_SCALE)
                g = int(g_base * fade * BRIGHTNESS_SCALE)
                b = int(b_base * fade * BRIGHTNESS_SCALE)

                if 0 <= left < NUM_LEDS:
                    neo.set_led_color(left, r, g, b)
                if 0 <= right < NUM_LEDS:
                    neo.set_led_color(right, r, g, b)

            neo.update_strip()
            await asyncio.sleep(delay)

            # 💥 لحظة الالتقاء – الانفجار الفوري
            if left >= right or step >= middle:
                break

        # ====== 💥 انفجار كامل مباشر ======
        for i in range(NUM_LEDS):
            neo.set_led_color(i, int(r_base * BRIGHTNESS_SCALE), int(g_base * BRIGHTNESS_SCALE), int(b_base * BRIGHTNESS_SCALE))
        neo.update_strip()
        await asyncio.sleep(0.1)

        # ====== ✨ Fade تدريجي للانفجار ======
        fade_steps = 30
        for f in range(fade_steps):
            factor = 1 - (f / fade_steps)
            for i in range(NUM_LEDS):
                neo.set_led_color(
                    i,
                    int(r_base * factor * BRIGHTNESS_SCALE),
                    int(g_base * factor * BRIGHTNESS_SCALE),
                    int(b_base * factor * BRIGHTNESS_SCALE)
                )
            neo.update_strip()
            await asyncio.sleep(0.03)

        neo.clear_strip()
        neo.update_strip()

        # 💤 انتظار عشوائي قبل الإعادة
        wait_time = random.uniform(2, 10)
        await asyncio.sleep(wait_time)
