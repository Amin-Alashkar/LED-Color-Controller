import asyncio
import random

class Snake:
    def __init__(self, start_pos, length=10):
        self.position = start_pos
        self.length = length
        self.done = False

    def get_body_indexes(self):
        return [self.position - i for i in range(self.length) if self.position - i >= 0]

    def move(self):
        self.position += 1
        if self.position - self.length > NUM_LEDS:
            self.done = True

async def custom_snake_army_loop(hex_color: str, delay: float = 0.05):
    """
    Snake Army:
    - Dim background stays on
    - Bright snakes (length 10) move forward and disappear at the end
    - Snakes spawn with random gaps (up to 10 LEDs apart)
    """
    global stop_requested

    r_base = int(hex_color[1:3], 16)
    g_base = int(hex_color[3:5], 16)
    b_base = int(hex_color[5:7], 16)

    DIM_LEVEL = 100  # نصف السطوع
    BRIGHT_LEVEL = 255  # سطوع الأفعى

    snakes = []
    snake_gap_counter = 0
    current_gap = random.randint(1, 10)

    while not stop_requested:
        # الخلفية كلها بنصف السطوع
        for i in range(NUM_LEDS):
            neo.set_led_color(i,
                (r_base * DIM_LEVEL) // 255,
                (g_base * DIM_LEVEL) // 255,
                (b_base * DIM_LEVEL) // 255
            )

        # توليد أفعى جديدة إذا حان الوقت
        if snake_gap_counter >= current_gap:
            snakes.append(Snake(start_pos=0))
            snake_gap_counter = 0
            current_gap = random.randint(1, 10)
        else:
            snake_gap_counter += 1

        # تحديث الأفاعي
        for snake in snakes:
            for i in snake.get_body_indexes():
                if i < NUM_LEDS:
                    neo.set_led_color(i, r_base, g_base, b_base)
            snake.move()

        # إزالة الأفاعي التي خرجت
        snakes = [s for s in snakes if not s.done]

        neo.update_strip()
        await asyncio.sleep(delay)

    neo.clear_strip()
    neo.update_strip()
