# main.py

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import asyncio
import random
import time

# *** إعداد مكتبة التحكم في شريط LED ***
# ملاحظة: تأكد أنك قمت بتثبيت المكتبة المناسبة للتحكم في الـ LED في جهازك،
# مثل rpi_ws281x لـ Raspberry Pi أو أي مكتبة أخرى تعتمد عليها.
# هنا سنفترض وجود مكتبة باسم `neopixel` للتحكم بشريط WS2812/NeoPixel:
try:
    import neopixel
    import board
except ImportError:
    # إذا لم تجد مكتبة neopixel، يمكنك تعديل هذا الجزء لاستخدام المكتبة التي تستخدمها فعليًا.
    raise RuntimeError("Please install the 'neopixel' library or adjust imports for your LED setup.")

# ----------------------------
# إعدادات الشريط
# ----------------------------
LED_COUNT = 60          # عدد الـ LEDs في الشريط (غيرّه إذا كان لديك عدد مختلف)
LED_PIN = board.D18     # المنفذ الذي يخرج الـ PWM لإشارة الشريط (مثال لرقاقة Raspberry Pi)
LED_BRIGHTNESS = 0.5    # سطوع الشريط (0.0 إلى 1.0)
LED_ORDER = neopixel.GRB  # ترتيب ألوان الـ LED (اعتمادًا على نوع الشريط)

# تهيئة كائن الشريط
pixels = neopixel.NeoPixel(
    LED_PIN,
    LED_COUNT,
    brightness=LED_BRIGHTNESS,
    auto_write=False,
    pixel_order=LED_ORDER
)

# ----------------------------
# تعريف تطبيق FastAPI
# ----------------------------
app = FastAPI()

# ----------------------------
# نموذج استقبال بيانات اللون
# ----------------------------
class ColorRequest(BaseModel):
    color: str  # بنستقبل لون بصيغة "#RRGGBB"

# ----------------------------
# دالة مساعدة لتحويل hex إلى tuple من أرقام RGB
# ----------------------------
def hex_to_rgb(hex_color: str):
    """
    تستقبل لون بصيغة "#RRGGBB" أو "RRGGBB" وتُعيد tuple من (R, G, B) بالأعداد الصحيحة بين 0 و255.
    """
    # نتأكد من وجود الهاش في البداية
    if hex_color.startswith("#"):
        hex_color = hex_color[1:]
    if len(hex_color) != 6:
        raise ValueError("Invalid hex color format. Expected RRGGBB or #RRGGBB.")
    try:
        r = int(hex_color[0:2], 16)
        g = int(hex_color[2:4], 16)
        b = int(hex_color[4:6], 16)
    except ValueError:
        raise ValueError("Invalid characters in hex color.")
    return (r, g, b)

# ----------------------------
# دالة Glitch Flash Animation
# ----------------------------
async def glitch_flash_animation(rgb_color: tuple[int, int, int], duration: float = 5.0, interval: float = 0.05):
    """
    تنشّط تأثير Glitch Flash: وميض غير منتظم وسريع بلون واحد.
    • rgb_color: tuple من (R, G, B) يحدد لون الـ LED.
    • duration: المدة الكلية للتأثير بالثواني.
    • interval: الفترة الزمنية بين كل تحديث (يعتمد على السرعة المطلوبة).
    """
    start_time = time.time()
    num_pixels = len(pixels)

    # نكرر حتى انتهاء المدة
    while time.time() - start_time < duration:
        # ننشئ حالة عشوائية لكل LED: إما يضوي باللون المطلوب أو يطفي
        for i in range(num_pixels):
            # قرار عشوائي: إما 0 أو 1
            if random.random() < 0.5:
                pixels[i] = (0, 0, 0)  # إطفاء LED
            else:
                pixels[i] = rgb_color  # تشغيل LED باللون المطلوب
        pixels.show()
        # ننتظر الفترة المحددة قبل التحديث التالي
        await asyncio.sleep(interval)

    # في النهاية، نطفي كل الـ LEDs
    for i in range(num_pixels):
        pixels[i] = (0, 0, 0)
    pixels.show()

# ----------------------------
# Endpoint لتشغيل Glitch Flash
# ----------------------------
@app.post("/glitch_flash")
async def glitch_flash(request: ColorRequest):
    """
    تستقبل POST على المسار /glitch_flash مع JSON:
    {
        "color": "#FF00AA"
    }
    ثم تشغّل تأثير Glitch Flash بلون المستخدم المحدد.
    """
    # محاولة تحويل النص إلى ثلاثي الألوان
    try:
        rgb = hex_to_rgb(request.color)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

    # نبدأ تشغيل التأثير بشكل غير متزامن (غير حاجز)
    # لتجنب حظر السيرفر عند تشغيل التأثير:
    asyncio.create_task(glitch_flash_animation(rgb))
    return {"status": "started", "effect": "glitch_flash", "color": request.color}

# ----------------------------
# Endpoint لإيقاف أي تأثير جارٍ (اختياري)
# ----------------------------
@app.post("/stop_animation")
async def stop_animation():
    """
    يمكن استخدام هذا المسار لإيقاف أي تأثير جارٍ يدويًا:
    فقط يطفي كل الـ LEDs فورًا.
    """
    for i in range(len(pixels)):
        pixels[i] = (0, 0, 0)
    pixels.show()
    return {"status": "stopped"}
