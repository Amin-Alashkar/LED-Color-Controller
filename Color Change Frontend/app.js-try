// ===== App.js (التعديلات لتمكين Rainbow Flow) =====

// at school
// const API_BASE_URL = "http://10.220.1.123:8000";

// at home
const API_BASE_URL = "http://192.168.1.247:8000";

// DOM Elements
const colorDisplay    = document.getElementById('colorDisplay');
const lightOneBtn     = document.getElementById('lightOneBtn');
const offBtn          = document.getElementById('offBtn');
const off2Btn         = document.getElementById('off2Btn');
const colorPicker     = document.getElementById('colorPicker');

// إضافة مرجع لزر Wave Effect و Rainbow Flow
const waveEffectBtn   = document.getElementById('WaveEffectBtn');
const rainbowFlowBtn  = document.getElementById('RainbowFlowBtn');

// العنصر الخاص بالبطاقة
const cardElement     = document.querySelector('.card');

let isAnimationRunning = false;

async function sendRequest(endpoint, data) {
    try {
        const res = await fetch(`${API_BASE_URL}${endpoint}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data)
        });
        return await res.json();
    } catch (e) {
        console.error("API Error:", e);
        return { status: "error", message: e.message };
    }
}

async function fetchAndApplyState() {
    try {
        const res = await fetch(`${API_BASE_URL}/state`);
        if (!res.ok) {
            throw new Error(`HTTP ${res.status}`);
        }
        const { animation, color } = await res.json();

        if (color) {
            updateUI(color);
            cardElement.style.background = "";
        } else {
            updateUI('#000000');
            cardElement.style.background = "";
        }

        // ==== Fade Colors ====
        if (animation === "fade_colors") {
            isAnimationRunning = true;
            lightOneBtn.classList.add('active');
            lightOneBtn.textContent = 'Fade Colors (Running)';
            cardElement.style.background = "#000000";
            colorDisplay.textContent = "Fade Colors";
        } else {
            isAnimationRunning = false;
            lightOneBtn.classList.remove('active');
            lightOneBtn.textContent = 'Fade Colors';
        }

        // ==== Wave Effect ====
        if (animation === "wave_effect") {
            isAnimationRunning = true;
            waveEffectBtn.classList.add('active');
            waveEffectBtn.textContent = 'Wave Effect (Running)';
            cardElement.style.background = "#000000";
            colorDisplay.textContent = "Wave Effect";
        } else {
            waveEffectBtn.classList.remove('active');
            waveEffectBtn.textContent = 'Wave Effect';
        }

        // ==== Rainbow Flow ====
        if (animation === "rainbow_flow") {
            isAnimationRunning = true;
            rainbowFlowBtn.classList.add('active');
            rainbowFlowBtn.textContent = 'Rainbow Flow (Running)';
            cardElement.style.background = "#000000";
            colorDisplay.textContent = "Rainbow Flow";
        } else {
            rainbowFlowBtn.classList.remove('active');
            rainbowFlowBtn.textContent = 'Rainbow Flow';
        }

    } catch (err) {
        console.error("Error fetching state:", err);
        updateUI('#000000');
        isAnimationRunning = false;

        // تأكد من إزالة أي حالة نشطة على الأزرار
        lightOneBtn.classList.remove('active');
        lightOneBtn.textContent = 'Fade Colors';
        waveEffectBtn.classList.remove('active');
        waveEffectBtn.textContent = 'Wave Effect';
        rainbowFlowBtn.classList.remove('active');
        rainbowFlowBtn.textContent = 'Rainbow Flow';

        cardElement.style.background = "";
    }
}

// ================================================================
// دالة تغيير اللون الثابت
async function changeColor(color) {
    if (isAnimationRunning) {
        await stopAnimation();
    }
    updateUI(color);
    cardElement.style.background = "";
    await sendRequest("/color", { hex_color: color });
}

// دالة إيقاف الأنيميشن (سترسل POST /stop)
async function stopAnimation() {
    isAnimationRunning = false;
    lightOneBtn.classList.remove('active');
    lightOneBtn.textContent = 'Fade Colors';
    waveEffectBtn.classList.remove('active');
    waveEffectBtn.textContent = 'Wave Effect';
    rainbowFlowBtn.classList.remove('active');
    rainbowFlowBtn.textContent = 'Rainbow Flow';
    colorDisplay.textContent = 'Off';
    cardElement.style.background = "";
    await sendRequest("/stop", {});
}

/**
 * عند الضغط على زر "Fade Colors":
 * - لو أنيميشن جاري، نوقفه
 * - وإلا نبدأ fade_colors
 */
async function startFadeAnimation() {
    if (isAnimationRunning) {
        await stopAnimation();
        return;
    }
    isAnimationRunning = true;
    lightOneBtn.classList.add('active');
    lightOneBtn.textContent = 'Fade Colors (Running)';
    // غمّر البطاقة بالسواد وأرّخ الأنيميشن
    cardElement.style.background = "#000000";
    colorDisplay.textContent = "Fade Colors";
    await sendRequest("/animate", { animation_type: "fade_colors" });
}

/**
 * دالة بداية/إيقاف "Wave Effect"
 */
async function startWaveAnimation() {
    if (isAnimationRunning) {
        await stopAnimation();
        return;
    }
    isAnimationRunning = true;
    waveEffectBtn.classList.add('active');
    waveEffectBtn.textContent = 'Wave Effect (Running)';
    cardElement.style.background = "#000000";
    colorDisplay.textContent = "Wave Effect";
    await sendRequest("/animate", { animation_type: "wave_effect" });
}

/**
 * دالة بداية/إيقاف "Rainbow Flow"
 */
async function startRainbowAnimation() {
    if (isAnimationRunning) {
        await stopAnimation();
        return;
    }
    isAnimationRunning = true;
    rainbowFlowBtn.classList.add('active');
    rainbowFlowBtn.textContent = 'Rainbow Flow (Running)';
    cardElement.style.background = "#000000";
    colorDisplay.textContent = "Rainbow Flow";
    await sendRequest("/animate", { animation_type: "rainbow_flow" });
}

// دالة لتحديث واجهة المستخدم إلى اللون المعطى
function updateUI(color) {
    document.body.style.background     = color;
    document.body.style.boxShadow      = `0 0 80px ${color}80 inset`;
    colorDisplay.style.background      = color;
    colorDisplay.textContent           = color.toUpperCase();
    colorPicker.value                  = color;
}

// === ربط الأحداث ===
lightOneBtn   .addEventListener("click", startFadeAnimation);
waveEffectBtn .addEventListener("click", startWaveAnimation);
rainbowFlowBtn.addEventListener("click", startRainbowAnimation);
offBtn        .addEventListener("click", stopAnimation);
off2Btn       .addEventListener("click", stopAnimation);
colorPicker   .addEventListener("input", e => changeColor(e.target.value));

// عند تحميل الصفحة لأول مرة:
document.addEventListener("DOMContentLoaded", async () => {
    await fetchAndApplyState();
    // إذا أردت دوريات لجلب الحالة دوريًا:
    setInterval(fetchAndApplyState, 2000);
});

document.addEventListener("DOMContentLoaded", function () {
    const starsContainer = document.querySelector(".stars-container");

    for (let i = 0; i < 20; i++) {
        let star = document.createElement("div");
        star.classList.add("star");
        star.innerHTML = "⋆"; // إضافة رمز النجمة الحقيقي

        // وضع النجوم في أماكن عشوائية في البداية
        star.style.left = Math.random() * window.innerWidth + "px";
        star.style.top = Math.random() * window.innerHeight + "px";
        star.style.animationDelay = Math.random() * 3 + "s";

        // ─── إضافة لتحريك النجوم عشوائيًا عند انتهاء كل دورة أنيميشن ───
        star.addEventListener("animationiteration", () => {
            // بعد انتهاء الدورة الحالية للـ twinkle، نعيد توليد موقع عشوائي جديد
            star.style.left = Math.random() * window.innerWidth + "px";
            star.style.top = Math.random() * window.innerHeight + "px";
        });

        starsContainer.appendChild(star);
    }
});

/* ─── START: إضافة SSE (Server‑Sent Events) لدفع الحالة تلقائيًا ─── */
const evtSource = new EventSource(`${API_BASE_URL}/stream`);
evtSource.onmessage = e => {
    try {
        const { animation, color } = JSON.parse(e.data);

        // نطبّق المنطق نفسه من fetchAndApplyState() ولكن اعتماداً على الرسالة الواردة
        if (color) {
            updateUI(color);
            cardElement.style.background = "";
        } else {
            updateUI('#000000');
            cardElement.style.background = "";
        }

        // fade_colors
        if (animation === "fade_colors") {
            isAnimationRunning = true;
            lightOneBtn.classList.add('active');
            lightOneBtn.textContent = 'Fade Colors (Running)';
            cardElement.style.background = "#000000";
            colorDisplay.textContent = "Fade Colors";
        } else {
            lightOneBtn.classList.remove('active');
            lightOneBtn.textContent = 'Fade Colors';
        }

        // wave_effect
        if (animation === "wave_effect") {
            isAnimationRunning = true;
            waveEffectBtn.classList.add('active');
            waveEffectBtn.textContent = 'Wave Effect (Running)';
            cardElement.style.background = "#000000";
            colorDisplay.textContent = "Wave Effect";
        } else {
            waveEffectBtn.classList.remove('active');
            waveEffectBtn.textContent = 'Wave Effect';
        }

        // rainbow_flow
        if (animation === "rainbow_flow") {
            isAnimationRunning = true;
            rainbowFlowBtn.classList.add('active');
            rainbowFlowBtn.textContent = 'Rainbow Flow (Running)';
            cardElement.style.background = "#000000";
            colorDisplay.textContent = "Rainbow Flow";
        } else {
            rainbowFlowBtn.classList.remove('active');
            rainbowFlowBtn.textContent = 'Rainbow Flow';
        }

    } catch (err) {
        console.error("SSE onmessage parse error:", err);
    }
};
/* ─── END: إضافة SSE ─── */
