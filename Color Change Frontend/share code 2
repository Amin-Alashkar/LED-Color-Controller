async def fireworks_burst_loop(delay: float = 0.05):
    """
    تأثير الألعاب النارية المعدل:
    1. “الصاروخ” (ثلاثة أضواء) يتحرك من أسفل الشريط إلى منتصفه:
       - الرأس يكون بسطوع متوسط (~50%)
       - الضوء الثاني خلف الرأس بسطوع أقل (~30%)
       - الضوء الثالث خلف الثاني بسطوع أقل (~10%)
    2. عند وصول الرأس إلى منتصف عدد الـ LEDs، يحدث الانفجار بكامل السطوع (100%).
    3. بعد الانفجار، نطبق تلاشي تدريجي (Fade-out) حتى تنطفئ الأضواء.
    """
    global stop_requested
    COLORS = [
        (255, 0, 0),    # أحمر
        (0, 0, 255),    # أزرق
        (0, 255, 0),    # أخضر
        (255, 255, 0),  # أصفر
        (255, 0, 255),  # أرجواني
        (0, 255, 255),  # سماوي
        (255, 165, 0),  # برتقالي
    ]
    
    # إعدادات السطوع للأضواء الثلاثة (الصاروخ)
    ROCKET_BRIGHTNESSES = [
        0.5,  # سطوع الرأس (50%)
        0.3,  # سطوع الضوء الثاني (30%)
        0.1   # سطوع الضوء الثالث (10%)
    ]
    # سطوع الانفجار الكامل
    EXPLOSION_BRIGHTNESS = 1.0  # 100%
    # عدد خطوات التلاشي بعد الانفجار
    FADE_STEPS = 20             

    # نحسب منتصف عدد الـ LEDs. 
    # إذا NUM_LEDS = 20، فـ midpoint = 20 // 2 = 10 (أي الـ LED عند الفهرس 10).
    midpoint = NUM_LEDS // 2

    while not stop_requested:
        for color in COLORS:
            if stop_requested:
                break

            # -------------------------
            # 1. حركة “الصاروخ” حتى منتصف الشريط
            # -------------------------
            for head_pos in range(NUM_LEDS):
                if stop_requested:
                    break

                # إذا وصل الرأس للمنتصف، ننتقل لمرحلة الانفجار فورًا
                if head_pos == midpoint:
                    break

                neo.clear_strip()
                # نرسم ثلاث نقاط: الرأس وتاليه وخلف
                for idx in range(3):
                    led_pos = head_pos - idx
                    if 0 <= led_pos < NUM_LEDS:
                        factor = ROCKET_BRIGHTNESSES[idx]
                        r = int(color[0] * factor)
                        g = int(color[1] * factor)
                        b = int(color[2] * factor)
                        neo.set_led_color(led_pos, r, g, b)

                neo.update_strip()
                # نضاعف التأخير قليلًا لنرى حركة الصاروخ بوضوح
                await asyncio.sleep(delay * 2)

            if stop_requested:
                break

            # -------------------------
            # 2. الانفجار عند منتصف الشريط
            # -------------------------
            neo.clear_strip()
            for i in range(NUM_LEDS):
                r = int(color[0] * EXPLOSION_BRIGHTNESS)
                g = int(color[1] * EXPLOSION_BRIGHTNESS)
                b = int(color[2] * EXPLOSION_BRIGHTNESS)
                neo.set_led_color(i, r, g, b)
            neo.update_strip()
            # نبقى بمشهد الانفجار الكامل لفترة قصيرة
            await asyncio.sleep(0.2)

            if stop_requested:
                break

            # -------------------------
            # 3. التلاشي التدريجي (Fade-out) بعد الانفجار
            # -------------------------
            for fade_step in range(FADE_STEPS):
                if stop_requested:
                    break
                factor = 1 - (fade_step / FADE_STEPS)  # من 1 (كامل) إلى 0 (إطفاء)
                neo.clear_strip()
                for i in range(NUM_LEDS):
                    r = int(color[0] * factor)
                    g = int(color[1] * factor)
                    b = int(color[2] * factor)
                    neo.set_led_color(i, r, g, b)
                neo.update_strip()
                await asyncio.sleep(delay)

            # بعد انتهاء التلاشي، ننظف الشريط وننتظر قليلًا قبل اللون القادم
            neo.clear_strip()
            neo.update_strip()
            await asyncio.sleep(0.2)

        # نعيد الدورة مع الألوان الأخرى طالما لم يُطلَب الإيقاف
    # إذا طُلب التوقف نهائيًّا، نتأكد من إطفاء كامل الشريط
    neo.clear_strip()
    neo.update_strip()
