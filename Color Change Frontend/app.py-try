// at school
// const API_BASE_URL = "http://10.220.1.123:8000";

// at home
const API_BASE_URL = "http://192.168.1.247:8000";

// DOM Elements
const colorDisplay    = document.getElementById('colorDisplay');
const lightOneBtn     = document.getElementById('lightOneBtn');
const offBtn          = document.getElementById('offBtn');
const off2Btn         = document.getElementById('off2Btn');
const colorPicker     = document.getElementById('colorPicker');

let isAnimationRunning = false;

/**
 * دالة مساعدة لإرسال POST إلى الخادم
 * endpoint: مسار النهاية ("/animate", "/color", "/stop", إلخ)
 * data: جسم الـ JSON (مثل { animation_type: "...", color_index: ... } أو { hex_color: "#..." })
 */
async function sendRequest(endpoint, data) {
    try {
        const res = await fetch(`${API_BASE_URL}${endpoint}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data)
        });
        return await res.json();
    } catch (e) {
        console.error("API Error:", e);
        return { status: "error", message: e.message };
    }
}

/**
 * عند اختيار لون ثابت (Red, Green, ... أو Color Picker):
 * 1. يتوقّف أي أنيميشن جاري (إذا كان هناك واحد) عبر stopAnimation()
 * 2. يحدث الواجهة محليًا عبر updateUI(color)
 * 3. يرسل POST إلى /color مع { hex_color: color }
 */
async function changeColor(color) {
    if (isAnimationRunning) {
        await stopAnimation();
    }
    updateUI(color);
    await sendRequest("/color", { hex_color: color });
}

/**
 * لإيقاف الأنيميشن تمامًا:
 * 1. يرسل POST إلى /stop
 * 2. يضبط الحالة المحليّة isAnimationRunning = false
 * 3. يغيّر نص الزرّ إلى 'Fade Colors'
 * 4. يحدث العرض محليًا للون أسود (Off)
 */
async function stopAnimation() {
    await sendRequest("/stop");
    isAnimationRunning = false;
    lightOneBtn.classList.remove('active');
    lightOneBtn.textContent = 'Fade Colors';
    updateUI('#000000');
}

/**
 * عند الضغط على زرّ "Fade Colors":
 * إذا كان الأنيميشن جاريًا ⇒ استدعاء stopAnimation()
 * خلاف ذلك ⇒
 *   - ضبط isAnimationRunning = true
 *   - إضافة الـ CSS class 'active' لتأثير البَصْمَة (pulse)
 *   - تغيير نصّ الزرّ إلى 'Fade Colors (Running)'
 *   - ثمّ إرسال POST إلى /animate مع { animation_type: "fade_colors" }
 */
async function startFadeAnimation() {
    if (isAnimationRunning) {
        await stopAnimation();
        return;
    }
    isAnimationRunning = true;
    lightOneBtn.classList.add('active');
    lightOneBtn.textContent = 'Fade Colors (Running)';
    await sendRequest("/animate", { animation_type: "fade_colors" });
}

/**
 * دالة جديدة: ترسل GET إلى /state لاستلام حالة اللون والأنيميشن الحالي من الخادم
 * الخادم سيُرجع:
 *   {
 *     "animation": null | "fade_colors" | "light_one_by_one" | ...,
 *     "color": "#RRGGBB"
 *   }
 *
 * بناءً عليه، نجري:
 *   - updateUI(color)
 *   - إذا كانت animation === "fade_colors" ⇒ نجعل الزرّ في وضع (Running)
 *   - وإلاّ نجعله في الوضع الافتراضي "Fade Colors"
 */
async function fetchAndApplyState() {
    try {
        const res = await fetch(`${API_BASE_URL}/state`);
        const { animation, color } = await res.json();

        // حدّث العرض للون
        updateUI(color);

        if (animation === "fade_colors") {
            isAnimationRunning = true;
            lightOneBtn.classList.add('active');
            lightOneBtn.textContent = 'Fade Colors (Running)';
        } else {
            isAnimationRunning = false;
            lightOneBtn.classList.remove('active');
            lightOneBtn.textContent = 'Fade Colors';
        }
    } catch (err) {
        console.error("Error fetching state:", err);
    }
}

/**
 * تحدّث الصفحة بصريًا:
 *   - لون الخلفيّة (body)
 *   - لون الدائرة (colorDisplay)
 *   - نص الدائرة (#RRGGBB)
 *   - قيمة الـ colorPicker نفسها
 */
function updateUI(color) {
    document.body.style.background     = color;
    document.body.style.boxShadow      = `0 0 80px ${color}80 inset`;
    colorDisplay.style.background      = color;
    colorDisplay.textContent           = color.toUpperCase();
    colorPicker.value                  = color;
}

// ===== ربط الأحداث على الأزرار والعناصر =====
lightOneBtn.addEventListener("click", startFadeAnimation);
offBtn       .addEventListener("click", stopAnimation);
off2Btn      .addEventListener("click", stopAnimation);

// ربط color-picker لالتقاط التغيير وإرسال changeColor(...)
colorPicker.addEventListener("input", e => changeColor(e.target.value));

// عند تحميل الصفحة (DOMContentLoaded) ننفّذ:
document.addEventListener("DOMContentLoaded", async () => {
    // نضبط اسم الزرّ افتراضيًا إلى "Fade Colors"
    lightOneBtn.textContent = 'Fade Colors';
    // نحدّث العرض مؤقتًا إلى اللون الأحمر (يمكن تغييره لاحقًا)
    updateUI('#ff0000');
    // ثمّ نطلب الحالة الحقيقية من الخادم كي نعكسها في الواجهة
    await fetchAndApplyState();
});
