// at school
// const API_BASE_URL = "http://10.220.1.123:8000";

// at home
const API_BASE_URL = "http://192.168.1.247:8000";

// DOM Elements
const colorDisplay    = document.getElementById('colorDisplay');
const lightOneBtn     = document.getElementById('lightOneBtn');
const offBtn          = document.getElementById('offBtn');
const off2Btn         = document.getElementById('off2Btn');
const colorPicker     = document.getElementById('colorPicker');

let isAnimationRunning = false;

/**
 * دالة مساعدة لإرسال طلب POST إلى الخادم.
 * 
 * @param {string} endpoint  نصّ المسار، مثل "/animate", "/color", "/stop"
 * @param {object} data      جسم الطلب (JSON)، مثل { animation_type: "...", color_index: ... } أو { hex_color: "#..." }
 * @returns {Promise<object>}  يسترجع استجابة JSON من الخادم أو كائن خطأ
 */
async function sendRequest(endpoint, data) {
    try {
        const res = await fetch(`${API_BASE_URL}${endpoint}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data)
        });
        return await res.json();
    } catch (e) {
        console.error("API Error:", e);
        return { status: "error", message: e.message };
    }
}

/**
 * عندما يضغط المستخدم على زر لون ثابت (أحمر/أخضر/... أو Color Picker):
 * 1) إن كان هناك أنيميشن جارٍ، يتوقف عبر stopAnimation()
 * 2) يحدث العرض محليًا إلى اللون الجديد
 * 3) يرسل POST إلى /color مع { hex_color: color }
 */
async function changeColor(color) {
    if (isAnimationRunning) {
        await stopAnimation();
    }
    updateUI(color);
    await sendRequest("/color", { hex_color: color });
}

/**
 * يُوقف أي أنيميشن جارٍ:
 * 1) يرسل POST إلى /stop
 * 2) يعدّل المتغيرات المحليّة isAnimationRunning = false
 * 3) يغيّر نص الزرّ إلى "Fade Colors"
 * 4) حدّث العرض محليًا إلى اللون الأسود (#000000)
 */
async function stopAnimation() {
    await sendRequest("/stop");
    isAnimationRunning = false;
    lightOneBtn.classList.remove('active');
    lightOneBtn.textContent = 'Fade Colors';
    updateUI('#000000');
}

/**
 * عند الضغط على زر "Fade Colors":
 * إذا كان الأنيميشن جاريًا ⇒ نستدعي stopAnimation()
 * غير ذلك ⇒
 *   - نضبط isAnimationRunning = true
 *   - نضيف الـ CSS class 'active' لكي يظهر التأثير البصري (pulse)
 *   - نغيّر نصّ الزرّ إلى 'Fade Colors (Running)'
 *   - ثم نرسل POST إلى /animate مع JSON { animation_type: "fade_colors" }
 */
async function startFadeAnimation() {
    if (isAnimationRunning) {
        await stopAnimation();
        return;
    }
    isAnimationRunning = true;
    lightOneBtn.classList.add('active');
    lightOneBtn.textContent = 'Fade Colors (Running)';
    await sendRequest("/animate", { animation_type: "fade_colors" });
}

/**
 * دالة جديدة تُسمّى عند تحميل الصفحة (DOMContentLoaded) لجلب الحالة الحقيقية:
 *   1) ترسل GET إلى /state
 *   2) تستقبل JSON بالشكل { animation: "...", color: "#RRGGBB" }
 *   3) تحدّث العرض المحليّ استنادًا إلى تلك القيم:
 *      - إذا كان هناك لون ثابت (color ليس null) ⇒ show that color
 *      - إذا كانت animation === "fade_colors" ⇒ اضبط الزرّ في وضع (Running)
 */
async function fetchAndApplyState() {
    try {
        // نرسل GET إلى /state
        const res = await fetch(`${API_BASE_URL}/state`);
        const { animation, color } = await res.json();

        // إذا كان هناك لون ثابت مُخزن (color ليس null)، نحدّث العرض به فورًا
        if (color) {
            updateUI(color);
        } else {
            // إذا لم يكن هناك لون ثابت (color === null) ونريد مثلاً عرض Off أو leave placeholder
            updateUI('#000000');
        }

        // إن كان الأنيميشن جارٍ (fade_colors)، نظهر الزرّ بوضع (Running)
        if (animation === "fade_colors") {
            isAnimationRunning = true;
            lightOneBtn.classList.add('active');
            lightOneBtn.textContent = 'Fade Colors (Running)';
        } else {
            // لا أنيميشن جارٍ ⇒ وضع الزرّ الافتراضي
            isAnimationRunning = false;
            lightOneBtn.classList.remove('active');
            lightOneBtn.textContent = 'Fade Colors';
        }
    } catch (err) {
        console.error("Error fetching state:", err);
        // في حال فشل الجلب (مثلاً الخادم غير متاح)، يمكنك تجاهل التحديث أو عرض رسالة.
    }
}

/**
 * تحديث العناصر البصريّة في الصفحة إلى اللون المعطى:
 *   - خلفيّة الصفحة
 *   - الدائرة الوسطية colorDisplay
 *   - قيمة colorPicker نفسها
 *   - النص داخل colorDisplay هو قيمة الـ hex بالأحرف الكبيرة
 */
function updateUI(color) {
    document.body.style.background     = color;
    document.body.style.boxShadow      = `0 0 80px ${color}80 inset`;
    colorDisplay.style.background      = color;
    colorDisplay.textContent           = color.toUpperCase();
    colorPicker.value                  = color;
}

// === ربط الأحداث ===
lightOneBtn.addEventListener("click", startFadeAnimation);
offBtn       .addEventListener("click", stopAnimation);
off2Btn      .addEventListener("click", stopAnimation);
colorPicker  .addEventListener("input", e => changeColor(e.target.value));

// عند تحميل الصفحة، ننفّذ:
document.addEventListener("DOMContentLoaded", async () => {
    // أولًا: نجلب الحالة من الخادم قبل تعيين أي لون افتراضي
    await fetchAndApplyState();
});
