// ─────────────── Shooting Star JS ───────────────

// Helper to get a random integer between min (inclusive) and max (exclusive)
function randBetween(min, max) {
  return Math.random() * (max - min) + min;
}

// Function to spawn one shooting star
function createShootingStar() {
  const container = document.getElementById('shooting-stars');
  if (!container) return;

  // Create the element
  const star = document.createElement('div');
  star.classList.add('shooting-star');

  // Choose a random edge for start: top, left, right, or bottom
  const edge = Math.floor(randBetween(0, 4)); // 0=top, 1=right, 2=bottom, 3=left
  let startX, startY, endX, endY, angleDeg;

  const viewportWidth  = window.innerWidth;
  const viewportHeight = window.innerHeight;

  switch (edge) {
    case 0: // start at random position along top edge
      startX = randBetween(0, viewportWidth) + 'px';
      startY = '-100px'; // just above the screen
      // end somewhere near bottom (plus a bit outside)
      endX = randBetween(0, viewportWidth) + 'px';
      endY = (viewportHeight + 100) + 'px';
      break;
    case 1: // start at right edge
      startX = (viewportWidth + 100) + 'px';
      startY = randBetween(0, viewportHeight) + 'px';
      // end near left
      endX = '-100px';
      endY = randBetween(0, viewportHeight) + 'px';
      break;
    case 2: // start at bottom edge
      startX = randBetween(0, viewportWidth) + 'px';
      startY = (viewportHeight + 100) + 'px';
      // end near top
      endX = randBetween(0, viewportWidth) + 'px';
      endY = '-100px';
      break;
    case 3: // start at left edge
      startX = '-100px';
      startY = randBetween(0, viewportHeight) + 'px';
      // end near right
      endX = (viewportWidth + 100) + 'px';
      endY = randBetween(0, viewportHeight) + 'px';
      break;
  }

  // Calculate the angle in degrees so the comet “points” along its path
  // We can find the angle of the vector from (startX, startY) to (endX, endY).
  // First parse numbers (remove "px").
  const sx = parseFloat(startX);
  const sy = parseFloat(startY);
  const ex = parseFloat(endX);
  const ey = parseFloat(endY);
  const dx = ex - sx;
  const dy = ey - sy;
  angleDeg = Math.atan2(dy, dx) * (180 / Math.PI) + 90; 
    // +90 so that the 0° tip of our div points “forward”

  // Assign CSS variables for positioning & angle
  star.style.setProperty('--start-x', `${startX}`);
  star.style.setProperty('--start-y', `${startY}`);
  star.style.setProperty('--end-x', `${endX}`);
  star.style.setProperty('--end-y', `${endY}`);
  star.style.setProperty('--angle', `${angleDeg}deg`);

  // Add to DOM
  container.appendChild(star);

  // Remove from DOM after the animation finishes (~1.2s)
  setTimeout(() => {
    star.remove();
  }, 1400); // a little extra to let 'scar' animation finish
}

// Kick off a shooting star about once per second (adjust timing as you see fit)
setInterval(createShootingStar, 1000);
